<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\HeroiconsOutline;
use Hyva\Theme\ViewModel\HeroiconsSolid;
use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;

/** @var Escaper $escaper */
/** @var Template $block */
/** @var ViewModelRegistry $viewModels */

/** @var HeroiconsOutline $heroicons */
$heroicons = $viewModels->require(HeroiconsOutline::class);

/** @var HeroiconsSolid $heroiconssolid */
$heroiconssolid = $viewModels->require(HeroiconsSolid::class);

/** @var Hyva\Theme\ViewModel\StoreConfig $storeConfig */
$storeConfig = $viewModels->require(Hyva\Theme\ViewModel\StoreConfig::class);
$showMiniCart = $storeConfig->getStoreConfig(\Magento\Checkout\Block\Cart\Sidebar::XML_PATH_CHECKOUT_SIDEBAR_DISPLAY);
?>
<script>
    function initHeader () {
        return {
            searchOpen: false,
            cart: {},
            isCartOpen: false,
            atTop: false,
            sticky: true,
            pageMessage: document.querySelector(".page.messages"),
            resetCartCache: () => {
                hyva.setCookie('mage-cache-sessid', '', -1, true);
                window.dispatchEvent(new CustomEvent('reload-customer-section-data'));
            },
            init() {
                // reset cart cache after redirected from success order
                const isHomepage = window.location.pathname === '/';
                if (isHomepage) this.resetCartCache();
                
                const matchMedia = window.matchMedia('(max-width: 1279px)');
                const matchMediaTabletUp = window.matchMedia('(min-width: 768px)');
                const matchMediaDesktopUp = window.matchMedia('(min-width: 1280px)');
                let lastScrollTop = window.pageYOffset;
                
                // set the initial value
                this.isMobile = matchMedia.matches;
                this.isTabletUp = matchMediaTabletUp.matches;
                this.isDesktopUp = matchMediaDesktopUp.matches;
                this.headerHeight = document.querySelector('#header').offsetHeight;
                this.topHeaderContent = document.querySelector('.top-header-content');
                this.topHeaderContentHeight = () => {
                    if (this.topHeaderContent) {
                        return this.topHeaderContent.offsetHeight;
                    } else {
                        return 0;
                    }
                };

                this.mainHeaderContentHeight = document.querySelector('.main-header-content').offsetHeight;
                this.desktopMenuHeight = document.querySelector('.menu-desktop').offsetHeight;
                this.mobileHeaderHeight = document.querySelector('.header-mobile').offsetHeight;
                this.scrollDown = false;
                this.scrollDownHeight = this.topHeaderContentHeight() + this.mainHeaderContentHeight;
                this.scrollUpHeight = this.topHeaderContentHeight();

                this.pageMessage.classList.add('!fixed');
                this.pageMessage.style.top = this.headerHeight+'px';

                this.getScrollValues = () => {
                    const currentScrollTop = window.pageYOffset;
                    if (lastScrollTop < currentScrollTop) {
                        this.scrollDown = true;
                    } else {
                        this.scrollDown = false;
                    }
                    lastScrollTop = currentScrollTop;

                    if (this.isDesktopUp && this.atTop && this.scrollDown) {
                        this.pageMessage.style.top = this.desktopMenuHeight+'px';
                    } else if (this.isDesktopUp && this.atTop && !this.scrollDown) {
                        this.pageMessage.style.top = this.headerHeight+'px';
                    } else if (this.isMobile && this.atTop && this.scrollDown) {
                        this.pageMessage.style.top = this.mobileHeaderHeight+'px';
                    } else if (this.isMobile && this.atTop && !this.scrollDown) {
                        this.pageMessage.style.top = this.headerHeight+'px';
                    }
                }

                // trigger update value on changes
                if(typeof matchMedia.onchange !== 'object') {
                    // fallback for iOS 12/13, where addEventListener does not accept an event type parameter
                    matchMedia.addListener((event) => this.isMobile = event.matches);
                    matchMediaTabletUp.addListener((event) => this.isTabletUp = event.matches);
                    matchMediaDesktopUp.addListener((event) => this.isDesktopUp = event.matches);
                } else {
                    matchMedia.addEventListener(
                        "change",
                        (event) => this.isMobile = event.matches
                    );
                    matchMediaTabletUp.addEventListener(
                        "change",
                        (event) => this.isTabletUp = event.matches
                    );
                    matchMediaDesktopUp.addEventListener(
                        "change",
                        (event) => this.isDesktopUp = event.matches
                    );
                }

                document.body.style.paddingTop = this.headerHeight+'px';
            },
            getData(data) {
                if (data.cart) { this.cart = data.cart }
            },
            isCartEmpty() {
                return !this.cart.summary_count
            },
            toggleCart(event) {
                if (event.detail && event.detail.isOpen !== undefined) {
                    this.isCartOpen = event.detail.isOpen
                    if (!this.isCartOpen && this.$refs && this.$refs.cartButton) {
                        this.$refs.cartButton.focus()
                    }
                } else {
                    <?php
                    /*
                     * The toggle-cart event was previously dispatched without parameter to open the drawer (not toggle).
                     * Keeping this in here for backwards compatibility.
                     */
                    ?>
                    this.isCartOpen = true
                }
            }
        }
    }
    function initCompareHeader() {
        return {
            compareProducts: null,
            itemCount: 0,
            receiveCompareData(data) {
                if (data['compare-products']) {
                    this.compareProducts = data['compare-products'];
                    this.itemCount = this.compareProducts.count;
                }
            }
        }
    }
</script>
<div id="header"
     class="relative z-30 w-full"
     x-data="initHeader()"
     @private-content-loaded.window="getData(event.detail.data)"
     @scroll.window="getScrollValues; atTop = (window.pageYOffset < mainHeaderContentHeight) ? false: true;"
     :class="sticky ? '!fixed' : ''"
     :style="if (isDesktopUp && atTop && scrollDown) {
        return 'margin-top: -'+scrollDownHeight+'px;'
    } else if (isDesktopUp && atTop && !scrollDown) {
        return 'margin-top: -'+scrollUpHeight+'px;'
    } else if ((isMobile && atTop && scrollDown) || (isMobile && atTop && !scrollDown)) {
        return 'margin-top: -'+topHeaderContentHeight()+'px;'
    }"
>
    <?php
        $blockId = 'header-top-notification';
        $headerNotification = $block->getLayout()->createBlock(\Magento\Cms\Block\Block::class)
            ->setBlockId($blockId)->toHtml();
    ?>

    <div class="top-header-content">
        <?php if ($headerNotification): ?>
        <div class="bg-primary text-white text-base leading-5 text-center p-2">
            <div class="container">
                <?= /* @noEscape */ $headerNotification ?>
            </div>
        </div>
        <?php endif; ?>

        <div class="hidden bg-white border-b lg:block">
            <div class="h-[44px] flex items-center justify-end container gap-8">
                <?php
                    echo $this->getLayout()
                    ->createBlock("Magento\Framework\View\Element\Template")
                    ->setTemplate("Magento_Directory::currency.phtml")
                    ->toHtml();
                ?>
                <?= $block->getChildHtml('store-language-switcher'); ?>
            </div>
        </div>
    </div>

    <div class="w-full bg-white header-mobile">
        <div class="bg-white relative border-b border-solid main-header-content">
            <div class="container flex justify-between items-center py-[16px] h-[56px] md:h-[76px] gap-[20px]">

                <?= $block->getChildHtml('topmenu.mobile') ?>

                <!--Logo-->
                <?= $block->getChildHtml('logo'); ?>

                <!--Search tablet & desktop-->
                <template x-if="isTabletUp">
                    <div id="search-content-wrapper"
                        @keydown.escape="
                            $refs.searchButton.focus();
                        "
                    >
                        <?= $block->getChildHtml('header-search'); ?>
                    </div>
                </template>

                <div class="flex gap-4 items-center order-3 header-icons-wrapper">
                    <!--Notification Icon-->
                    <template x-if="isTabletUp">
                        <div>
                            <?= $block->getChildHtml("header.notification") ?>
                        </div>
                    </template>

                    <!--Compare Icon-->
                    <template x-if="!isMobile">    
                        <a id="compare-link"
                            class="relative inline-block no-underline text-neutral-600"
                            href="<?= $escaper->escapeUrl($block->getUrl('catalog/product_compare/index')) ?>"
                            title="<?= $escaper->escapeHtml(__('Compare Products')) ?>"
                            x-data="initCompareHeader()"
                            @private-content-loaded.window="receiveCompareData($event.detail.data)"
                        >
                            <?= $heroicons->switchHorizontalHtml("", 24, 24) ?>
        
                            <span class="sr-only label">
                            <?= $escaper->escapeHtml(__('Compare Products')) ?>
                            </span>
        
                            <span x-show="itemCount > 0" class="absolute top-0 left-[calc(100%_-_7px)] h-[20px] min-w-[20px] leading-[20px] px-[6px] -mt-5 -mr-4 text-xs font-semibold
                                text-center text-white uppercase transform -translate-x-1
                                translate-y-1/2 bg-yellow-500 rounded-full"
                            >
                                <span x-text="itemCount"></span>
                                <span x-show="itemCount === 1" class="sr-only">
                                    <?= $escaper->escapeHtml(__('item')) ?>
                                </span>
                                <span x-show="itemCount > 1" class="sr-only">
                                    <?= $escaper->escapeHtml(__('items')) ?>
                                </span>
                            </span>
                        </a>
                    </template>

                    <!--Search Icon-->
                    <template x-if="!isTabletUp">
                        <button
                            id="menu-search-icon"
                            class="inline-block ml-1 no-underline sm:ml-3 text-neutral-600"
                            @click.prevent="
                                searchOpen = !searchOpen;
                                $dispatch('search-open');
                            "
                            aria-label="<?= $escaper->escapeHtmlAttr(__('Toggle search form')) ?>"
                            aria-haspopup="true"
                            :aria-expanded="searchOpen"
                            x-ref="searchButton"
                        >
                            <?= $heroicons->searchHtml("", 24, 24, ["aria-hidden" => "true"]) ?>
                        </button>
                    </template>

                    <!--Cart Icon-->
                    <?php if ($showMiniCart): ?>
                        <button
                    <?php else: ?>
                        <a
                    <?php endif ?>
                        id="menu-cart-icon"
                        class="relative inline-block no-underline text-neutral-600 hover:text-primary-700"
                        x-ref="cartButton"
                        :aria-disabled="isCartEmpty()"
                        title="<?= $escaper->escapeHtmlAttr(__('Cart')) ?>"
                        <?php if ($showMiniCart): ?>
                            @click.prevent.stop="() => {
                                $dispatch('toggle-cart', { isOpen: true })
                            }"
                            @toggle-cart.window="toggleCart($event)"
                            :aria-expanded="isCartOpen"
                            aria-haspopup="dialog"
                        <?php else: ?>
                            href="<?= $escaper->escapeUrl($block->getUrl('checkout/cart/index')) ?>"
                        <?php endif ?>
                    >
                        <span
                            class="sr-only label"
                            x-text="`
                                <?= $escaper->escapeHtml($showMiniCart ? __('Toggle minicart') : __('View cart')) ?>,
                                ${isCartEmpty() ?
                                '<?= $escaper->escapeHtml(__('Cart is empty')) ?>' :
                                hyva.str(
                                    'You have %1 product%2 in your cart.',
                                    cart.summary_count,
                                    cart.summary_count === 1 ? '' : 's'
                                )}`
                            "
                        >
                        </span>
        
                        <?= $heroiconssolid->shoppingCartHtml("", 24, 24) ?>
        
                        <span
                            x-text="cart.summary_count"
                            x-show="!isCartEmpty()"
                            x-cloak
                            class="
                                absolute top-0 left-[calc(100%_-_7px)] h-[20px] min-w-[20px] leading-[20px] px-[6px] -mt-5 -mr-4 text-xs font-semibold
                                text-center text-white uppercase transform -translate-x-1
                                translate-y-1/2 rounded-full bg-primary
                            "
                            aria-hidden="true"
                        ></span>
                    <?php if ($showMiniCart): ?>
                        </button>
                    <?php else: ?>
                        </a>
                    <?php endif ?>

                    <!--Customer Icon & Dropdown-->
                    <template x-if="!isMobile">
                        <?= $block->getChildHtml('customer') ?>
                    </template>
                </div>
            </div>
        </div>

        <div class="bg-white menu-desktop">
            <div class="container">
                <?= $block->getChildHtml('topmenu.desktop') ?>
            </div>
        </div>

        <!--Search mobile-->
        <template x-if="!isTabletUp">
            <div id="search-content-wrapper"
                x-cloak x-show="searchOpen"
                @click.outside="searchOpen = false"
                @keydown.escape="
                    searchOpen = false;
                    $refs.searchButton.focus();
                "
            >
                <?= $block->getChildHtml('header-search'); ?>
            </div>
        </template>

        <!--Cart Drawer-->
        <?= $block->getChildHtml('cart-drawer'); ?>

        <!--Authentication Pop-Up-->
        <?= $block->getChildHtml('authentication-popup'); ?>
    </div>
</div>
